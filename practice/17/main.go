package main

import (
	"fmt"
)

// бинарный поиск подразумевает поиск позиции желаемого элемента в отсортированном массиве следующим образом:
// берем исходный массив и сравниваем средний элемент с желаемым.
// если желаемый элемент больше среднего, то мы берем вторую половину исходного массива, берем его средний элемент и опять сравниваем с желаемым
// если желаемый элемент меньше среднего, то мы берем первую половину исходного массива, берем его средний элемент и опять сравниваем с желаемым
// процедура повторяется пока мы не найдем желаемый элемент, либо после очереднолго деления массива пополам, останется только пустой массив,
// что будет означать что желаемого элемента в массиве нет

func binarySearch(arr []int, target int) int {
	// выставляем индексовые границы существующего массива
	left, right := 0, len(arr)-1

	// строки ниже left = mid + 1 и right = mid - 1 смещаю после каждой итерации деления массива левую или правую индексную границу подмассива
	// (в слачае если желаемый элемент не равен среднему элементу) друг к другу, что гарантирукет конечность цикла for
	for left <= right {
		// ищем середину исходного массива на первой итерации или середину подмассивов на последующих итерациях
		mid := left + (right-left)/2

		// производим сравнение желаемого и среднего элемента в массиве/подмассиве
		if arr[mid] == target {
			// если элементы равны, то мы нашли индекс желаемого элемента и возвращаем его
			return mid
		} else if arr[mid] < target {
			// если желаемый элемент больше среднего, то нам нужно сдвинуть левую индексную границу массива
			// в позицию после среднего элемента, т.к желаемый элемент точно находится после среднего.
			// левая часть массива при этом водится из рассмотрения
			left = mid + 1
		} else {
			// если желаемый элемент меньше среднего, то нам нужно сдвинуть правую индексную границу массива
			// в позицию до среднего элемента, т.к желаемый элемент точно находится до среднего
			// правая часть массива при этом водится из рассмотрения
			right = mid - 1
		}
	}

	// если элемент не найден возращаем число-флаг
	return -1
}

func main() {
	// отсортированный массив, в котором будем выполнять поиск
	arr := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

	// значение, которое будем искать
	target := 7

	// выполнение бинарного поиска
	index := binarySearch(arr, target)

	// выводим что нашли или что не нашли
	if index != -1 {
		fmt.Printf("Found %d at index %d\n", target, index)
	} else {
		fmt.Printf("%d not found in the array\n", target)
	}
}
